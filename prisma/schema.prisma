// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ai_output_tag {
  ai_output_id Int
  tag_id       Int
  ai_output    ai_output @relation(fields: [ai_output_id], references: [ai_output_id], onDelete: NoAction, onUpdate: NoAction)
  tag          tag       @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([ai_output_id, tag_id])
}

model ai_output {
  ai_output_id  Int             @id @default(autoincrement())
  title         String          @db.VarChar(255)
  description   String
  image_url     String          @db.VarChar(255)
  user_id       Int
  ai_output_tag ai_output_tag[]
  user          user            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model article_tag {
  article_id Int
  tag_id     Int
  article    article @relation(fields: [article_id], references: [article_id], onDelete: NoAction, onUpdate: NoAction)
  tag        tag     @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([article_id, tag_id])
}

model article {
  article_id       Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  created_at       DateTime           @db.Date
  updated_at       DateTime?          @db.Date
  cover_image_url  String?            @db.VarChar(255)
  user_id          Int
  article_tag      article_tag[]
  user             user               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  articles_content articles_content[]
}

model articles_content {
  article_id Int
  content_id Int       @default(autoincrement())
  created_at DateTime  @db.Date
  updated_at DateTime? @db.Date
  value      String
  article    article   @relation(fields: [article_id], references: [article_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([article_id, content_id])
}

model attachment {
  attachment_id Int     @id @default(autoincrement())
  message_id    Int
  photo_url     String? @db.VarChar(255)
  video_url     String? @db.VarChar(255)
  location      String? @db.VarChar(255)
  message       message @relation(fields: [message_id], references: [message_id], onDelete: NoAction, onUpdate: NoAction)
}

model badges {
  badge_id        Int          @id @default(autoincrement())
  title           String       @db.VarChar(255)
  description     String
  image_url       String       @db.VarChar(255)
  required_points Int
  user_badge      user_badge[]
}

model course_tag {
  course_id Int
  tag_id    Int
  course    course @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction)
  tag       tag    @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([course_id, tag_id])
}

model course {
  course_id       Int          @id @default(autoincrement())
  title           String       @db.VarChar(255)
  description     String
  instructor      String       @db.VarChar(100)
  cover_image_url String       @db.VarChar(255)
  price           Decimal      @db.Decimal(10, 2)
  course_tag      course_tag[]
}

model group_tag {
  group_id Int
  tag_id   Int
  group    group @relation(fields: [group_id], references: [group_id], onDelete: NoAction, onUpdate: NoAction)
  tag      tag   @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([group_id, tag_id])
}

model group_user {
  group_id  Int
  user_id   Int
  type      String    @db.VarChar(255)
  joined_at DateTime  @db.Date
  left_at   DateTime? @db.Date
  group     group     @relation(fields: [group_id], references: [group_id], onDelete: NoAction, onUpdate: NoAction)
  user      user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([group_id, user_id])
}

model group {
  group_id        Int          @id @default(autoincrement())
  title           String       @db.VarChar(255)
  description     String
  cover_image_url String       @db.VarChar(255)
  created_at      DateTime     @db.Date
  created_by      Int
  group_tag       group_tag[]
  group_user      group_user[]
  user            user         @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  message         message[]
}

model level {
  level_id    Int    @id @default(autoincrement())
  title       String @db.VarChar(30)
  description String @db.VarChar(255)
  image_url   String
  user        user[]
}

model message_ai {
  message_ai_id Int      @id @default(autoincrement())
  content       String   @db.VarChar(255)
  created_at    DateTime @db.Date
  user_id       Int
  user          user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model message {
  message_id Int          @id @default(autoincrement())
  user_id    Int
  group_id   Int
  content    String
  created_at DateTime     @db.Date
  updated_at DateTime     @db.Date
  attachment attachment[]
  group      group        @relation(fields: [group_id], references: [group_id], onDelete: NoAction, onUpdate: NoAction)
  user       user         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model notification {
  notification_id Int      @id @default(autoincrement())
  title           String   @db.VarChar(255)
  content         String
  created_at      DateTime @db.Date
  seen            Boolean
  user_id         Int
  user            user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model payment_method {
  method_id   Int      @id @default(autoincrement())
  card_id     String   @db.VarChar(50)
  card_number String   @db.VarChar(255)
  holder_name String   @db.VarChar(100)
  expiry_date DateTime @db.Date
  user_id     Int
  user        user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model plan_benefit {
  plan_id                Int
  plan_benefit_id        Int
  monthly_ai_output      Int
  hourly_ai_messages     Int
  groups_created         Int
  monthly_planner_helper Int
  plan                   plan @relation(fields: [plan_id], references: [plan_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([plan_id, plan_benefit_id])
}

model plan {
  plan_id           Int            @id @default(autoincrement())
  title             String         @db.VarChar(30)
  description       String         @db.VarChar(255)
  trial_period      String         @db.VarChar(255)
  billing_frequency Int
  image_url         String
  price             Int
  currency          String         @db.VarChar(10)
  due_date          DateTime       @db.Date
  plan_benefit      plan_benefit[]
  user              user[]
}

model tag {
  tag_id        Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  ai_output_tag ai_output_tag[]
  article_tag   article_tag[]
  course_tag    course_tag[]
  group_tag     group_tag[]
  user_tag      user_tag[]
}

model task {
  task_id     Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String
  due_date    DateTime @db.Date
  user_id     Int
  status      String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model user_badge {
  user_id     Int
  badge_id    Int
  unlock_date DateTime @db.Date
  badges      badges   @relation(fields: [badge_id], references: [badge_id], onDelete: NoAction, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, badge_id])
}

model user_tag {
  user_id Int
  tag_id  Int
  tag     tag  @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)
  user    user @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, tag_id])
}

model user {
  user_id           Int              @id @default(autoincrement())
  username          String           @unique @db.VarChar(30)
  email             String           @unique @db.VarChar(100)
  password          String           @db.VarChar(100)
  dob               DateTime         @db.Date
  points            Int              @default(0)
  full_name         String           @db.VarChar(100)
  phone_number      String           @db.VarChar(50)
  image             String?
  level_id          Int
  plan_id           Int
  renewal_date      DateTime         @db.Date
  subscription_date DateTime         @db.Date
  hashed_refresh_token String?       @db.VarChar(100)
  ai_output         ai_output[]
  article           article[]
  group_user        group_user[]
  group             group[]
  message_ai        message_ai[]
  message           message[]
  notification      notification[]
  payment_method    payment_method[]
  task              task[]
  user_badge        user_badge[]
  user_tag          user_tag[]
  level             level            @relation(fields: [level_id], references: [level_id], onDelete: NoAction, onUpdate: NoAction)
  plan              plan             @relation(fields: [plan_id], references: [plan_id], onDelete: NoAction, onUpdate: NoAction)
}
