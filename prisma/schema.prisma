generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ai_output_tag {
  ai_output_id Int
  tag_name     String
  ai_output    ai_output @relation(fields: [ai_output_id], references: [ai_output_id], onDelete: Cascade, onUpdate: Cascade)
  tag          tag       @relation(fields: [tag_name], references: [tag_name], onDelete: Cascade, onUpdate: Cascade)

  @@id([ai_output_id, tag_name])
}

model ai_output {
  ai_output_id  Int             @id @default(autoincrement())
  title         String          @db.VarChar(255)
  description   String
  image_url     String          @db.VarChar(255)
  user_id       Int
  ai_output_tag ai_output_tag[]
  user          user            @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

model article_tag {
  article_id Int
  tag_name   String
  article    article @relation(fields: [article_id], references: [article_id], onDelete: Cascade, onUpdate: Cascade)
  tag        tag     @relation(fields: [tag_name], references: [tag_name], onDelete: Cascade, onUpdate: Cascade)

  @@id([article_id, tag_name])
}

model article {
  article_id       Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  created_at       DateTime?          @default(now())
  updated_at       DateTime?          @updatedAt
  cover_image_url  String?            @db.VarChar(255)
  user_id          Int
  article_tag      article_tag[]
  user             user               @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  articles_content articles_content[]
}

model articles_content {
  article_id   Int
  content_id   Int       @default(autoincrement())
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt
  value        String
  content_type String
  article      article   @relation(fields: [article_id], references: [article_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([article_id, content_id])
}

model attachment {
  attachment_id Int     @id @default(autoincrement())
  message_id    Int
  photo_url     String? @db.VarChar(255)
  video_url     String? @db.VarChar(255)
  location      String? @db.VarChar(255)
  message       message @relation(fields: [message_id], references: [message_id], onDelete: Cascade, onUpdate: Cascade)
}

model badges {
  badge_id        Int          @id @default(autoincrement())
  title           String       @db.VarChar(255)
  description     String
  image_url       String       @db.VarChar(255)
  required_points Int
  user_badge      user_badge[]
}

model course_tag {
  course_id Int
  tag_name  String
  course    course @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: Cascade)
  tag       tag    @relation(fields: [tag_name], references: [tag_name], onDelete: Cascade, onUpdate: Cascade)

  @@id([course_id, tag_name])
}

model course {
  course_id       Int          @id @default(autoincrement())
  title           String       @db.VarChar(255)
  description     String
  instructor      String       @db.VarChar(100)
  cover_image_url String       @db.VarChar(255)
  price           Decimal      @db.Decimal(10, 2)
  course_tag      course_tag[]
}

model group_tag {
  group_id Int
  tag_name String
  group    group  @relation(fields: [group_id], references: [group_id], onDelete: Cascade, onUpdate: Cascade)
  tag      tag    @relation(fields: [tag_name], references: [tag_name], onDelete: Cascade, onUpdate: Cascade)

  @@id([group_id, tag_name])
}

model group_user {
  group_id       Int
  user_id        Int
  type           GroupUserTypeEnum @default(MEMBER)
  joined_at      DateTime          @default(now())
  left_at        DateTime?         @db.Date
  joining_status Boolean           @default(true)
  group          group             @relation(fields: [group_id], references: [group_id], onDelete: Cascade, onUpdate: Cascade)
  user           user              @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([group_id, user_id])
}

model group {
  group_id        Int          @id @default(autoincrement())
  title           String       @unique @db.VarChar(255)
  description     String
  cover_image_url String       @db.VarChar(255)
  created_at      DateTime?    @default(now())
  updated_at      DateTime?    @updatedAt
  created_by      Int
  group_tag       group_tag[]
  group_user      group_user[]
  user            user         @relation(fields: [created_by], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  message         message[]
}

model level {
  level_id    Int    @id @default(autoincrement())
  title       String @db.VarChar(30)
  description String @db.VarChar(255)
  image_url   String
  user        user[]
}

model message_ai {
  message_ai_id Int       @id @default(autoincrement())
  content       String    @db.VarChar(255)
  created_at    DateTime? @default(now())
  updated_at    DateTime? @updatedAt
  user_id       Int
  user          user      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

model message {
  message_id Int          @id @default(autoincrement())
  user_id    Int
  group_id   Int
  content    String
  deleted    Boolean      @default(false)
  created_at DateTime?    @default(now())
  updated_at DateTime?    @updatedAt
  attachment attachment[]
  group      group        @relation(fields: [group_id], references: [group_id], onDelete: Cascade, onUpdate: Cascade)
  user       user         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

model notification {
  notification_id Int       @id @default(autoincrement())
  title           String    @db.VarChar(255)
  content         String
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt
  seen            Boolean
  user_id         Int
  user            user      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

model payment_method {
  method_id   Int       @id @default(autoincrement())
  card_id     String    @db.VarChar(50)
  card_number String    @db.VarChar(255)
  holder_name String    @db.VarChar(100)
  expiry_date DateTime  @db.Date
  user_id     Int
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  user        user      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

model plan_benefit {
  plan_id                Int
  plan_benefit_id        Int
  monthly_ai_output      Int
  hourly_ai_messages     Int
  groups_created         Int
  monthly_planner_helper Int
  plan                   plan @relation(fields: [plan_id], references: [plan_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([plan_id, plan_benefit_id])
}

model plan {
  plan_id           Int            @id @default(autoincrement())
  title             String         @db.VarChar(30)
  description       String         @db.VarChar(255)
  trial_period      String         @db.VarChar(255)
  billing_frequency Int
  image_url         String
  price             Int
  currency          String         @db.VarChar(10)
  plan_benefit      plan_benefit[]
  user              user[]
}

model tag {
  tag_name      String          @id @unique @default("") @db.VarChar(255)
  ai_output_tag ai_output_tag[]
  article_tag   article_tag[]
  course_tag    course_tag[]
  group_tag     group_tag[]
  user_tag      user_tag[]
}

model task {
  task_id     Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?
  due_date    DateTime @db.Timestamp
  start_date  DateTime @db.Timestamp
  user_id     Int
  status      String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@index([user_id])
}

model user_badge {
  user_id     Int
  badge_id    Int
  unlock_date DateTime @db.Date
  badges      badges   @relation(fields: [badge_id], references: [badge_id], onDelete: Cascade, onUpdate: Cascade)
  user        user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, badge_id])
}

model user_tag {
  user_id  Int
  tag_name String
  tag      tag    @relation(fields: [tag_name], references: [tag_name], onDelete: Cascade, onUpdate: Cascade)
  user     user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, tag_name])
}

model user_follower {
  user_id     Int
  follower_id Int

  user     user @relation(name: "followed_by", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  follower user @relation(name: "following", fields: [follower_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, follower_id])
}

model user {
  user_id              Int       @id @default(autoincrement())
  username             String    @unique @db.VarChar(30)
  email                String    @unique @db.VarChar(100)
  password             String    @db.VarChar(100)
  dob                  DateTime? @db.Date
  points               Int?      @default(0)
  full_name            String    @db.VarChar(100)
  bio                  String?   @db.VarChar(512)
  cover_image          String?   @db.VarChar(255)
  phone_number         String?   @db.VarChar(50)
  image                String?
  level_id             Int       @default(1)
  plan_id              Int       @default(1)
  renewal_date         DateTime  @db.Date
  subscription_date    DateTime  @db.Date
  connected            Boolean   @default(false)
  active               Boolean   @default(false)
  hashed_refresh_token String?   @db.VarChar(100)

  ai_output      ai_output[]
  article        article[]
  group_user     group_user[]
  group          group[]
  message_ai     message_ai[]
  message        message[]
  notification   notification[]
  payment_method payment_method[]
  task           task[]
  user_badge     user_badge[]
  user_tag       user_tag[]
  level          level            @relation(fields: [level_id], references: [level_id], onDelete: Cascade, onUpdate: Cascade)
  plan           plan             @relation(fields: [plan_id], references: [plan_id], onDelete: Cascade, onUpdate: Cascade)
  following      user_follower[]  @relation("following")
  followed_by    user_follower[]  @relation("followed_by")
}

enum GroupUserTypeEnum {
  ADMIN
  MEMBER
}
